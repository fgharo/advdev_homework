#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev:latest",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    stage('Checkout Source') {
      checkout scm
    }

    dir('openshift-tasks') {
      def version = getVersionFromPom("pom.xml")

      def devTag  = "${version}-${env.BUILD_NUMBER}"
      def prodTag = version
      
      def devProject  = "${GUID}-tasks-dev"
	  def prodProject = "${GUID}-tasks-prod"

      stage('Build war') {
        echo "Building version ${devTag}"
		/*
		When are we expected to change the version of the pom so that way what gets stored in an artifactory is SNAPSHOT, RC, etc.?
		What good are the oc tags later on, devTag and prodTag?
			sh "${mvnCmd} versions:set -DnewVersion=${devTag}"
		*/
        sh "${mvnCmd} clean package -DskipTests" 
      }
      
      stage('Quality Checks'){
				parallel "Unit Tests": {
					 stage('Unit Tests') {
						sh "${mvnCmd} test"
				     }
				}, "Sonar Code Analysis": {
				    stage('Code Analysis') {
						sh "${mvnCmd} sonar:sonar -DskipTests -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
				    }
				}
	 }
	  
      stage('Publish to Nexus') {
		sh "${mvnCmd} deploy -DskipTests -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }
	
      stage('Build and Tag OpenShift Image') {
        sh "oc project ${devProject}"
        echo "Building OpenShift container image tasks:${devTag}"
		sh "oc start-build bc/tasks --from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war --follow"
        sh "oc tag tasks:latest tasks:${devTag}"
        
      }

      stage('Deploy to Dev') {
      	sh "oc project ${devProject}"             
        sh "oc set env dc/tasks VERSION='${devTag} (tasks-dev)'"
        sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}"
        
        sh "oc rollout latest tasks"
        
        def dc_version = sh(returnStdout: true, script: "oc get dc tasks --template={{.status.latestVersion}}").trim()
        echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
        def readyReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.readyReplicas}}").trim()
        def expectedReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.replicas}}").trim()
        while (readyReplicas != expectedReplicas) {
            sleep 5
            readyReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.readyReplicas}}").trim()
            expectedReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.replicas}}").trim()
        }
      }

      stage('Copy Image to Nexus container registry') {
        sh "oc project ${devProject}"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

        sh "oc project ${prodProject}"
        sh "oc tag ${devProject}/tasks:${devTag} ${devProject}/tasks:${prodTag}"
      }

      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
      	 sh "oc project ${prodProject}"
         activeApp = sh(returnStdout: true, script: "oc get route tasks --template={{.spec.to.name}}").trim()
         if(activeApp == "tasks-green"){
         	destApp = "tasks-blue"
         }
         echo "Active Application:      " + activeApp
         echo "Destination Application: " + destApp
		
		 sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
		 sh "oc set env dc/tasks-blue VERSION='${prodTag} (tasks-blue)'"
         sh "oc set env dc/tasks-green VERSION='${prodTag} (tasks-green)'"
  		 sh "oc delete configmap ${destApp}-config --ignore-not-found=true"
		 sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties"
		 
         sh "oc rollout latest ${destApp}"
        
         def dc_version = sh(returnStdout: true, script: "oc get dc ${destApp} --template={{.status.latestVersion}}").trim()
         echo "Waiting for ReplicationController ${destApp}-${dc_version} to be ready"
         def readyReplicas = sh(returnStdout: true, script: "oc get rc ${destApp}-${dc_version} --template={{.status.readyReplicas}}").trim()
         def expectedReplicas = sh(returnStdout: true, script: "oc get rc ${destApp}-${dc_version} --template={{.status.replicas}}").trim()
        
         while (readyReplicas != expectedReplicas) {
            sleep 5
            readyReplicas = sh(returnStdout: true, script: "oc get rc ${destApp}-${dc_version} --template={{.status.readyReplicas}}").trim()
            expectedReplicas = sh(returnStdout: true, script: "oc get rc ${destApp}-${dc_version} --template={{.status.replicas}}").trim()
         }
      }
      
      stage('Switch over to new Version') {
        sh "oc project ${prodProject}"
        echo "Switching Production application to ${destApp}."
        sh "oc patch route tasks -p '{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}'"
      }
    }
    
  }
}



// Convenience Functions 
// --------------------------------------------------------

def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}