#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev:latest",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${env.BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = version
      
      def devProject  = "${GUID}-tasks-dev"
	  def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"
		/*
		When are we expected to change the version of the pom so that way what gets stored in an artifactory is SNAPSHOT, RC, etc.?
		What good are the oc tags later on, devTag and prodTag?
			sh "${mvnCmd} versions:set -DnewVersion=${devTag}"
		*/
        sh "${mvnCmd} clean package -DskipTests" 
      }
      
      stage('Quality Checks'){
				parallel "Unit Tests": {
					 stage('Unit Tests') {
				        echo "Running Unit Tests"
						sh "${mvnCmd} test"
				     }
				}, "Sonar Code Analysis": {
					// Using Maven to call SonarQube for Code Analysis
				    stage('Code Analysis') {
				        echo "Running Code Analysis"
						sh "${mvnCmd} sonar:sonar -DskipTests -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
				    }
				}
	 }
	  

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
		sh "${mvnCmd} deploy -DskipTests -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }
	
      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
		sh "oc start-build bc/tasks --from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war --follow -n ${devProject}"
        // TBD: Build Image, tag Image
        sh "oc tag tasks:latest tasks:${devTag} -n ${devProject}"
        
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        sh "oc set env dc/tasks VERSION='${devTag} (tasks-dev)' -n ${devProject}"
        sh "oc rollout latest tasks -n ${devProject}"
        
        def dc_version = sh(returnStdout: true, script: "oc get dc tasks --template={{.status.latestVersion}} -n ${devProject}").trim()
        echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
        def readyReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.readyReplicas}} -n ${devProject}").trim()
        def expectedReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.replicas}} -n ${devProject}").trim()
        
        while (readyReplicas != expectedReplicas) {
            sleep 5
            readyReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.readyReplicas}} -n ${devProject}").trim()
            expectedReplicas = sh(returnStdout: true, script: "oc get rc tasks-${dc_version} --template={{.status.replicas}} -n ${devProject}").trim()
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t -n ${devProject}) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

        // Tag the built image with the production tag.
        sh "oc tag ${devProject}/tasks:${devTag} ${devProject}/tasks:${prodTag} -n ${prodProject}"
      }
/*
      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
      	sh "oc set env dc/tasks VERSION='${devTag} (tasks-dev)'"
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
      */
    }
    
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}